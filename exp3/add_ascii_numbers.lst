   1 0000               # File:		add_ascii_numbers.asm
   2 0000               # Author:	K. Reek
   3 0000               # Contributors:	P. White, W. Carithers
   4 0000               #		Colin Reilly
   5 0000               #
   6 0000               # Updates:
   7 0000               #		3/2004	M. Reek, named constants
   8 0000               #		10/2007 W. Carithers, alignment
   9 0000               #		09/2009 W. Carithers, separate assembly
  10 0000               #
  11 0000               # Description:	Add two ASCII numbers and store the result in ASCII.
  12 0000               #
  13 0000               # Arguments:	a0: address of parameter block.  The block consists of
  14 0000               #		four words that contain (in this order):
  15 0000               #
  16 0000               #			address of first input string
  17 0000               #			address of second input string
  18 0000               #			address where result should be stored
  19 0000               #			length of the strings and result buffer
  20 0000               #
  21 0000               #		(There is actually other data after this in the
  22 0000               #		parameter block, but it is not relevant to this routine.)
  23 0000               #
  24 0000               # Returns:	The result of the addition, in the buffer specified by
  25 0000               #		the parameter block.
  26 0000               #
  27 0000               
  28 0000               	.globl	add_ascii_numbers
  29 0000               
  30 0000               add_ascii_numbers:
  31 0000               A_FRAMESIZE = 40
  32 0000               
  33 0000               #
  34 0000               # Save registers ra and s0 - s7 on the stack.
  35 0000               #
  36 0000 23BDFFD8		addi 	$sp, $sp, -A_FRAMESIZE
  37 0004 AFBF0024		sw 	$ra, -4+A_FRAMESIZE($sp)
  38 0008 AFB7001C		sw 	$s7, 28($sp)
  39 000c AFB60018		sw 	$s6, 24($sp)
  40 0010 AFB50014		sw 	$s5, 20($sp)
  41 0014 AFB40010		sw 	$s4, 16($sp)
  42 0018 AFB3000C		sw 	$s3, 12($sp)
  43 001c AFB20008		sw 	$s2, 8($sp)
  44 0020 AFB10004		sw 	$s1, 4($sp)
  45 0024 AFB00000		sw 	$s0, 0($sp)
  46 0028               	
  47 0028               # ##### BEGIN STUDENT CODE BLOCK 1 #####
  48 0028               
  49 0028 8C900000	        lw      $s0, 0($a0)     # get address of first number
  50 002c 8C910004	        lw      $s1, 4($a0)     # get address of second number
  51 0030 8C920008	        lw      $s2, 8($a0)     # get address of result
  52 0034 8C93000C	        lw      $s3, 12($a0)    # get length of strings
  53 0038               
  54 0038                       #addi    $s3, $s3, -1    # decrement length
  55 0038               
  56 0038               addition_loop:
  57 0038                                               # branch when length is 0
  58 0038 12600007	        beq     $s3, $zero, done_adding
  59 003c               
  60 003c 0213A020	        add    $s4, $s0, $s3    # get effective first num digit pointer
  61 0040 2294FFFF	        addi   $s4, $s4, -1
  62 0044 0253B020	        add    $s6, $s2, $s3    # get effective result digit pointer
  63 0048               
  64 0048 82970000	        lb      $s7, 0($s4)     # get first digit of first num
  65 004c A2D70000	        sb      $s7, 0($s6)     # store the first digit in result
  66 0050                       
  67 0050 2273FFFF	        addi    $s3, $s3, -1    # decrement length num
  68 0054                       
  69 0054 0800000E	        j addition_loop
  70 0058               
  71 0058               done_adding:
  72 0058               
  73 0058               # ###### END STUDENT CODE BLOCK 1 ######
  74 0058               
  75 0058               #
  76 0058               # Restore registers ra and s0 - s7 from the stack.
  77 0058               #
  78 0058 8FBF0024		lw 	$ra, -4+A_FRAMESIZE($sp)
  79 005c 8FB7001C		lw 	$s7, 28($sp)
  80 0060 8FB60018		lw 	$s6, 24($sp)
  81 0064 8FB50014		lw 	$s5, 20($sp)
  82 0068 8FB40010		lw 	$s4, 16($sp)
  83 006c 8FB3000C		lw 	$s3, 12($sp)
  84 0070 8FB20008		lw 	$s2, 8($sp)
  85 0074 8FB10004		lw 	$s1, 4($sp)
  86 0078 8FB00000		lw 	$s0, 0($sp)
  87 007c 23BD0028		addi 	$sp, $sp, A_FRAMESIZE
  88 0080               
  89 0080 03E00008		jr	$ra			# Return to the caller.


A_FRAMESIZE        = 00000028   
add_ascii_numbers    00000000 RG text 
addition_loop        00000038 R  text 
done_adding          00000058 R  text 
