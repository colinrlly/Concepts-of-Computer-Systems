   1 0000               #
   2 0000               # FILE:         $File$
   3 0000               # AUTHOR:       Phil White, RIT 2016
   4 0000               #               
   5 0000               # CONTRIBUTORS:
   6 0000               #		<<<YOUR NAME HERE>>>
   7 0000               #
   8 0000               # DESCRIPTION:
   9 0000               #	This file contains the merge function of mergesort
  10 0000               #
  11 0000               
  12 0000               #-------------------------------
  13 0000               
  14 0000               #
  15 0000               # Numeric Constants
  16 0000               #
  17 0000               
  18 0000               PRINT_STRING = 4
  19 0000               PRINT_INT = 1
  20 0000               
  21 0000               
  22 0000               #***** BEGIN STUDENT CODE BLOCK 2 ***************************
  23 0000               
  24 0000               
  25 0000               #
  26 0000               # Make sure to add any .globl that you need here
  27 0000               #
  28 0000               
  29 0000                   .globl  merge
  30 0000                   .globl  sort
  31 0000               
  32 0000               #
  33 0000               # Name:         merge
  34 0000               # Description:  takes two individually sorted areas of an array and
  35 0000               #		merges them into a single sorted area
  36 0000               #
  37 0000               #		The two areas are defined between (inclusive)
  38 0000               #		area1:	low   - mid
  39 0000               #		area2:	mid+1 - high
  40 0000               #
  41 0000               #		Note that the area will be contiguous in the array
  42 0000               #
  43 0000               # Arguments:    a0:     a parameter block containing 3 values
  44 0000               #			- the address of the array to sort
  45 0000               #			- the address of the scrap array needed by merge
  46 0000               #			- the address of the compare function to use
  47 0000               #			  when ordering data
  48 0000               #               a1:     the index of the first element of the area
  49 0000               #               a2:     the index of the last element of the area
  50 0000               #               a3:     the index of the middle element of the area
  51 0000               # Returns:      none
  52 0000               # Destroys:     t0,t1
  53 0000               #
  54 0000               
  55 0000               merge:
  56 0000               A_FRAMESIZE = 48
  57 0000               
  58 0000               # 
  59 0000               # Save registers ra and s0 - s7 on the stack.
  60 0000               #
  61 0000               
  62 0000 23BDFFD0	        addi    $sp, $sp, -A_FRAMESIZE
  63 0004 AFBF002C	        sw      $ra, -4+A_FRAMESIZE($sp)
  64 0008 AFB7001C	        sw      $s7, 28($sp)
  65 000c AFB60018	        sw      $s6, 24($sp)
  66 0010 AFB50014	        sw      $s5, 20($sp)
  67 0014 AFB40010	        sw      $s4, 16($sp)
  68 0018 AFB3000C	        sw      $s3, 12($sp)
  69 001c AFB20008	        sw      $s2, 8($sp)
  70 0020 AFB10004	        sw      $s1, 4($sp)
  71 0024 AFB00000	        sw      $s0, 0($sp)
  72 0028               
  73 0028               # set a current location at the front of each sub-array
  74 0028                       # t0 = location of the array to sort
  75 0028 8C880000	        lw      $t0, 0($a0)     # get address of array to sort
  76 002c                     
  77 002c                       # multiply by 8 to get displacement of bytes
  78 002c 200B0004	        addi    $t3, $zero, 4   # get the number 4 in a register
  79 0030 00AB0018	        mult    $a1, $t3        # multiply the index of first sub-array by 8
  80 0034 00004812	        mflo    $t1             
  81 0038                       
  82 0038                       # t1 = location of the front of the first sub-array
  83 0038 01094820	        add     $t1, $t0, $t1   # add index of first sub-array to front of array
  84 003c 01209821	        move    $s3, $t1        # copy for moving over data at the end
  85 0040               
  86 0040                       # get index of second sub-array
  87 0040 20EA0001	        addi    $t2, $a3, 1     # add one to the middle index
  88 0044 014B0018	        mult    $t2, $t3        # multiply the index of second sub-array by 8
  89 0048 00005012	        mflo    $t2             
  90 004c                        
  91 004c                       # t2 = location of the front of the second sub-array
  92 004c 010A5020	        add     $t2, $t0, $t2   # add index of second sub-array to front of array
  93 0050               
  94 0050                       # t4 = location of middle (end of first sub-array)
  95 0050 00EB0018	        mult    $a3, $t3        # multiply index of middle by 8
  96 0054 00006012	        mflo    $t4
  97 0058 010C6020	        add     $t4, $t0, $t4   # add index of middle to front of array 
  98 005c                       
  99 005c                       # t5 = location of high   (end of second sub-array)
 100 005c 00CB0018	        mult    $a2, $t3        # multiply index of high by 8
 101 0060 00006812	        mflo    $t5
 102 0064 010D6820	        add     $t5, $t0, $t5   # add index of high to front of array
 103 0068               
 104 0068                       # s1 = location of front of scrap array
 105 0068 8C910004	        lw      $s1, 4($a0)
 106 006c 8C920004	        lw      $s2, 4($a0)     # second copy for moving over data at the end
 107 0070               
 108 0070                       # t0 = address of the array
 109 0070                       # t1 = address of the front of the first sub-array
 110 0070                       # t2 = address of the front of the second sub-array
 111 0070                       # t3 = the number 4
 112 0070                       # t4 = address of the middle of the array
 113 0070                       # t5 = address of the end of the array (high)
 114 0070                       # s1 = address of the front of the scrap array
 115 0070                       # s2 = address of the front of the scrap array
 116 0070 8C8B0008	        lw      $t3, 8($a0)     # get address of compare function
 117 0074               
 118 0074               while_no_empty:
 119 0074 0189702A	        slt     $t6, $t4, $t1   # set if front of first sub-array is greater than its end
 120 0078 01AA782A	        slt     $t7, $t5, $t2   # set if front of second array is greater than its end
 121 007c                       
 122 007c 15C00014	        bne     $t6, $zero, first_empty         # check if first is empty
 123 0080 15E00013	        bne     $t7, $zero, second_empty        # check if second is empty
 124 0084                 
 125 0084 8D2E0000	        lw      $t6, 0($t1)     # t6 = first element in first sub-array
 126 0088 8D4F0000	        lw      $t7, 0($t2)     # t7 = first element in second sub-array
 127 008c                       
 128 008c AFA40020	        sw      $a0, 32($sp)    # store arguments
 129 0090 AFA50024	        sw      $a1, 36($sp)
 130 0094                
 131 0094 000E2020	        add     $a0, $zero, $t6 # load t6 into a0
 132 0098 000F2820	        add     $a1, $zero, $t7 # load t7 into a1
 133 009c               
 134 009c 0160F809	        jalr    $t3             # run compare function
 135 00a0               
 136 00a0 8FA40020	        lw      $a0, 32($sp)    # load back arguments
 137 00a4 8FA50024	        lw      $a1, 36($sp)
 138 00a8                       
 139 00a8                       # v0 = return of compare function
 140 00a8 10400004	        beq     $v0, $zero, second_first
 141 00ac                     
 142 00ac 8D300000	        lw      $s0, 0($t1)     # move first element of sub-array into scrap array
 143 00b0 AE300000	        sw      $s0, 0($s1)
 144 00b4 21290004	        addi    $t1, $t1, 4     # advance current sub-array
 145 00b8               
 146 00b8 08000032	        j       bottom_of_loop
 147 00bc               second_first:
 148 00bc 8D500000	        lw      $s0, 0($t2)     # move first element of sub-array into scrap array
 149 00c0 AE300000	        sw      $s0, 0($s1)
 150 00c4 214A0004	        addi    $t2, $t2, 4     # advance current sub-array
 151 00c8               
 152 00c8               bottom_of_loop:
 153 00c8 22310004	        addi    $s1, $s1, 4     # advance scrap array pointer
 154 00cc               
 155 00cc 0800001D	        j       while_no_empty
 156 00d0               
 157 00d0               first_empty:
 158 00d0                  
 159 00d0               second_empty:
 160 00d0               
 161 00d0               done:
 162 00d0                       # get front of scrap array (s2)
 163 00d0                       # front of original array (s3)
 164 00d0 8E540000	        lw      $s4, 0($s2)     # copy first element from scrap array to original
 165 00d4 AE740000	        sw      $s4, 0($s3)
 166 00d8                       # iterate both
 167 00d8 22520004	        addi    $s2, $s2, 4     # increment both pointers
 168 00dc 22730004	        addi    $s3, $s3, 4
 169 00e0                       # until low > high
 170 00e0 01B3A82A	        slt     $s5, $t5, $s3   # set if end is less than front
 171 00e4 12A0FFFA	        beq     $s5, $zero, done
 172 00e8                       
 173 00e8               #
 174 00e8               # Restore registrs ra and s0 - s7 from the stack.
 175 00e8               #
 176 00e8               
 177 00e8 8FBF002C	        lw      $ra, -4+A_FRAMESIZE($sp)
 178 00ec 8FB7001C	        lw      $s7, 28($sp)
 179 00f0 8FB60018	        lw      $s6, 24($sp)
 180 00f4 8FB50014	        lw      $s5, 20($sp)
 181 00f8 8FB40010	        lw      $s4, 16($sp)
 182 00fc 8FB3000C	        lw      $s3, 12($sp)
 183 0100 8FB20008	        lw      $s2, 8($sp)
 184 0104 8FB10004	        lw      $s1, 4($sp)
 185 0108 8FB00000	        lw      $s0, 0($sp)
 186 010c 23BD0030	        addi    $sp, $sp, A_FRAMESIZE
 187 0110               
 188 0110 03E00008	        jr      $ra
 189 0114               # ********** END STUDENT CODE BLOCK 2 **********
 190 0114               
 191 0114               #
 192 0114               # End of Merge routine.
 193 0114               #


A_FRAMESIZE     = 00000030   
PRINT_INT       = 00000001   
PRINT_STRING    = 00000004   
bottom_of_loop    000000C8 R  text 
done              000000D0 R  text 
first_empty       000000D0 R  text 
merge             00000000 RG text 
second_empty      000000D0 R  text 
second_first      000000BC R  text 
sort              ******** XG
while_no_empty    00000074 R  text 
