   1 0000               #
   2 0000               # FILE:         $File$
   3 0000               # AUTHOR:       Phil White, RIT 2016
   4 0000               # CONTRIBUTORS:
   5 0000               #		W. Carithers
   6 0000               #		<<<YOUR NAME HERE>>>
   7 0000               #
   8 0000               # DESCRIPTION:
   9 0000               #	This program is an implementation of merge sort in MIPS
  10 0000               #	assembly 
  11 0000               #
  12 0000               # ARGUMENTS:
  13 0000               #	None
  14 0000               #
  15 0000               # INPUT:
  16 0000               # 	The numbers to be sorted.  The user will enter a 9999 to
  17 0000               #	represent the end of the data
  18 0000               #
  19 0000               # OUTPUT:
  20 0000               #	A "before" line with the numbers in the order they were
  21 0000               #	entered, and an "after" line with the same numbers sorted.
  22 0000               #
  23 0000               # REVISION HISTORY:
  24 0000               #	Aug  08		- P. White, original version
  25 0000               #
  26 0000               
  27 0000               #-------------------------------
  28 0000               
  29 0000               #
  30 0000               # Numeric Constants
  31 0000               #
  32 0000               
  33 0000               PRINT_STRING = 4
  34 0000               PRINT_INT = 1
  35 0000               
  36 0000               #-------------------------------
  37 0000               
  38 0000               #
  39 0000               
  40 0000               # ********** BEGIN STUDENT CODE BLOCK 1 **********
  41 0000               
  42 0000               #
  43 0000               # Make sure to add any .globl that you need here
  44 0000               #
  45 0000               
  46 0000                   .globl  merge
  47 0000                   .globl  sort
  48 0000               
  49 0000               # Name:         sort
  50 0000               # Description:  sorts an array of integers using the merge sort
  51 0000               #		algorithm
  52 0000               # 		Arguments Note: a1 and a2 specify the range inclusively
  53 0000               #
  54 0000               # Arguments:    a0:     a parameter block containing 3 values
  55 0000               #                       - the address of the array to sort
  56 0000               #                       - the address of the scrap array needed by merge
  57 0000               #                       - the address of the compare function to use
  58 0000               #                         when ordering data
  59 0000               #               a1:     the index of the first element in the range to sort
  60 0000               #               a2:     the index of the last element in the range to sort
  61 0000               # Returns:      none
  62 0000               #
  63 0000               
  64 0000               sort: 
  65 0000               
  66 0000               # ********** END STUDENT CODE BLOCK 1 **********
  67 0000               
  68 0000               #
  69 0000               # End of Merge sort routine.
  70 0000               #


PRINT_INT     = 00000001   
PRINT_STRING  = 00000004   
merge           ******** XG
sort            00000000 RG text 
