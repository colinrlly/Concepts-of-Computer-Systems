   1 0000               # File:		$Id$
   2 0000               # Author:	J. Heliotis, (author's version 1.3)
   3 0000               # Contributors:	K. Reek, 
   4 0000               # 		P. White, 
   5 0000               #		Colin Reilly
   6 0000               # Description:	This program reads a description of a geometric
   7 0000               #		figure from standard input and displays some
   8 0000               #		further information about it. Currently, the
   9 0000               #		program handles two types of figures: blocks
  10 0000               #		(rectangles) and circles.
  11 0000               #
  12 0000               # Purpose:	To demonstrate the implementation of polymorphic
  13 0000               #		subroutine calls
  14 0000               #
  15 0000               # Revisions:	$Log$
  16 0000               #		4/1/04	M. Reek changed to use MIPS linkage conventions
  17 0000               #
  18 0000               # CONSTANTS
  19 0000               #
  20 0000               # syscall codes
  21 0000               PRINT_INT =	1
  22 0000               PRINT_STRING = 	4
  23 0000               READ_INT = 	5
  24 0000               READ_STRING =	8
  25 0000               
  26 0000               # various frame sizes used by different routines
  27 0000               
  28 0000               FRAMESIZE_8 = 	8
  29 0000               FRAMESIZE_24 =	24
  30 0000               FRAMESIZE_40 =	40
  31 0000               FRAMESIZE_48 =	48
  32 0000               
  33 0000               	.data
  34 0000               	.align 2
  35 0000               
  36 0000               	#
  37 0000               	# Memory for allocating up to 100 figures.
  38 0000               	#
  39 0000               next:	
  40 0000 00000004		.word	pool		# ptr into the pool where next free
  41 0004               				# space is located
  42 0004               pool:	
  43 0004 00000000		.space	1200		# room for 100 figures
          00000000
          00000000
          00000000
          00000000
          00000000
  44 04b4               pool_end:			# a marker for the end of the free space
  45 04b4 00000000		.word	0		# used to tell us if we are out of mem
  46 04b8               
  47 04b8               fig_width:
  48 04b8 00000000		.word	0
  49 04bc               fig_height:
  50 04bc 00000000		.word	0
  51 04c0               
  52 04c0               	.align 0
  53 04c0               fig_char:
  54 04c0 30313233		.asciiz	"0123456789"	# I know this isn't a character, but
          34353637
          383900  
  55 04cb               				# SPIMs only has read_string, which 
  56 04cb               				# reads to eol and then null
  57 04cb               				# terminates the string it read in
  58 04cb               
  59 04cb               	#
  60 04cb               	# some constants for the code
  61 04cb               	#
  62 04cb               PI	= 3			# an bad integer approx. to pi, 3.14159...
  63 04cb               
  64 04cb               char_c:	
  65 04cb 43      		.ascii	"C"
  66 04cc               char_b:	
  67 04cc 42      		.ascii	"B"
  68 04cd               
  69 04cd               new_error:
  70 04cd 4F757420		.asciiz	"Out of memory for allocating figures.\n"
          6F66206D
          656D6F72
          7920666F
          7220616C
          6C6F6361
  71 04f4               
  72 04f4               figure_type_error_string:
  73 04f4 496C6C65		.asciiz	"Illegal figure type\n"
          67616C20
          66696775
          72652074
          7970650A
          00      
  74 0509               
  75 0509               circle_string:
  76 0509 43697263		.asciiz	"Circle ("
          6C652028
          00      
  77 0512               
  78 0512               block_string:
  79 0512 426C6F63		.asciiz	"Block ("
          6B202800
  80 051a               
  81 051a               comma_string:
  82 051a 2C00    		.asciiz	","
  83 051c               
  84 051c               area_string:
  85 051c 29202D20		.asciiz	") - area = "
          61726561
          203D2000
  86 0528               
  87 0528               perimeter_string:
  88 0528 3B207065		.asciiz	"; perimeter = "
          72696D65
          74657220
          3D2000  
  89 0537               
  90 0537               new_line:
  91 0537 0A00    		.asciiz	"\n"
  92 0539               
  93 0539               #
  94 0539               # Name:		MAIN PROGRAM
  95 0539               #
  96 0539               # Description:	Main logic for the program.
  97 0539               #
  98 0539               #		The program reads three values from standard input:
  99 0539               #		1) a character representing the type of figure to create
 100 0539               #		2) an integer representing the width of the bounding box
 101 0539               #			of the figure
 102 0539               #		3) an integer representing the height of the bounding box
 103 0539               #			of the figure
 104 0539               #
 105 0539               #		After creating the specified figure object, the program then
 106 0539               #		displays all available information on the object created.
 107 0539               #
 108 0539               
 109 0000               	.text			# this is program code
 110 0000               	.align 2		# instructions must be on word boundaries
 111 0000               	.globl main		# main is a global label
 112 0000               
 113 0000               main:
 114 0000               	# allocate stack frame according to formula & save state
 115 0000               
 116 0000 23BDFFE8		addi 	$sp, $sp,-FRAMESIZE_24   	
 117 0004 AFBF0014		sw 	$ra, -4+FRAMESIZE_24($sp)	
 118 0008 AFB10010		sw 	$s1, -8+FRAMESIZE_24($sp)
 119 000c AFB0000C		sw 	$s0, -12+FRAMESIZE_24($sp)
 120 0010               
 121 0010               	#
 122 0010               	# Read the character representing the figure type
 123 0010               	#
 124 0010               
 125 0010 34020008		li 	$v0, READ_STRING	# read a string	
 126 0014 3C040000		la 	$a0, fig_char	# place to store the char read in
     0018 34840000
 127 001c 20050009		addi	$a1, $zero, 9	# the number of characters to read
 128 0020 0000000C		syscall
 129 0024               
 130 0024               	#
 131 0024               	# Read the width into r1
 132 0024               	#
 133 0024 34020005		li	$v0, READ_INT
 134 0028 0000000C		syscall
 135 002c 00408021		move	$s0, $v0
 136 0030               
 137 0030               	#
 138 0030               	# Read the height into r2
 139 0030               	#
 140 0030 34020005		li	$v0, READ_INT
 141 0034 0000000C		syscall
 142 0038 00408821		move	$s1, $v0
 143 003c               
 144 003c               	#
 145 003c               	# Do the output
 146 003c               	#
 147 003c 02002021		move	$a0, $s0
 148 0040 02202821		move	$a1, $s1
 149 0044 0C00007C		jal	output_figures
 150 0048               
 151 0048               #
 152 0048               # All done -- exit the program!
 153 0048               #
 154 0048 8FBF0014		lw 	$ra, -4+FRAMESIZE_24($sp)	
 155 004c 8FB10010		lw 	$s1, -8+FRAMESIZE_24($sp)
 156 0050 8FB0000C		lw 	$s0, -12+FRAMESIZE_24($sp)
 157 0054               
 158 0054 23BD0018		addi 	$sp, $sp, FRAMESIZE_24   	
 159 0058 03E00008		jr 	$ra		# return from main and exit spim
 160 005c               	
 161 005c               
 162 005c               # ***********************************************************************
 163 005c               # *                                                                     *
 164 005c               # * THIS IS THE START OF EXPERIMENT-SPECIFIC CODE                       *
 165 005c               # *                                                                     *
 166 005c               # ***********************************************************************
 167 005c               
 168 005c               # Name:		Constants to keep in mind while working with figures
 169 005c               #
 170 005c               
 171 005c               # A Figure contains three words 
 172 005c               #		address of virtual function table at offset 0 in fig object
 173 005c               #		figure width 	at offset 4 in fig object
 174 005c               #		figure height 	at offset 8 in fig object
 175 005c               # Making the figures size as 12 bytes
 176 005c               
 177 005c               # A Figure virtual function table contains two function addresses (words):
 178 005c               #		addr area function 	at offset 0 in vtable
 179 005c               #		addr perimeter function	at offset 4 in vtable
 180 005c               #
 181 005c               
 182 005c               #
 183 005c               # Name:		new_figure
 184 005c               #
 185 005c               # Description:	Allocate space for a new figure from the pool of
 186 005c               #		available space. Luckily, both subclasses of FIGURE
 187 005c               #		take up the same amount of space.
 188 005c               #
 189 005c               # Arguments:	None.
 190 005c               # Returns:	v0: the address of the newly allocated figure.
 191 005c               #
 192 005c               
 193 005c               new_figure:
 194 005c               	#
 195 005c               	# See if there is any space left in the pool.
 196 005c               	#
 197 005c               
 198 005c 3C010000		lw	$t0, next
     0060 8C280000
 199 0064 3C090000		la	$t1, pool_end
     0068 35290000
 200 006c               
 201 006c 0109502A		slt	$t2, $t0, $t1	# Compare next addr to end of pool
 202 0070 15400006		bne	$t2, $zero, new_figure_ok	#  if less, still have space
 203 0074               
 204 0074               	#
 205 0074               	# No space left; write error message and exit.
 206 0074               	#
 207 0074               
 208 0074 34020004		li 	$v0, PRINT_STRING	# print error message
 209 0078 3C040000		la 	$a0, new_error
     007c 34840000
 210 0080 0000000C		syscall	
 211 0084               
 212 0084 3402000A		li 	$v0, 10		# terminate program
 213 0088 0000000C		syscall	
 214 008c               
 215 008c               new_figure_ok:
 216 008c               	#
 217 008c               	# There is space available.  Allocate the next figure, and
 218 008c               	# initialize all of its fields.
 219 008c               	#
 220 008c               
 221 008c 01001021		move	$v0, $t0	# set up to return spot for new figure
 222 0090 2108000C		addi	$t0, $t0, 12	# Adjust pointer to next figure
 223 0094 3C010000		sw	$t0, next
     0098 AC280000
 224 009c               
 225 009c               	#
 226 009c               	# Clear all fields.
 227 009c               	#
 228 009c               
 229 009c AC400000		sw	$zero, 0($v0)
 230 00a0 AC400004		sw	$zero, 4($v0)
 231 00a4 AC400008		sw	$zero, 8($v0)
 232 00a8               
 233 00a8 03E00008		jr	$ra
 234 00ac               
 235 00ac               
 236 00ac               #
 237 00ac               # Name:		figure_make
 238 00ac               #
 239 00ac               # Description:	Initialize the components of the figure object.
 240 00ac               #		Since FIGURE is an abstract class, it is expected that
 241 00ac               #		the creation subroutines for child classes will call this
 242 00ac               #		subroutine.
 243 00ac               #
 244 00ac               # Arguments:	a0 contains the height of the figure's bounding box
 245 00ac               #		a1 contains the width of the figure's bounding box
 246 00ac               #		a2 contains the address of the figure object
 247 00ac               #
 248 00ac               figure_make:
 249 00ac               
 250 00ac ACC50004		sw 	$a1, 4($a2)	# store the width in the fig object
 251 00b0 ACC40008		sw 	$a0, 8($a2)	# store the height in the fig object
 252 00b4               
 253 00b4 03E00008		jr	$ra
 254 00b8               
 255 00b8               # CODE FOR FIGURE SUBCLASS BLOCK
 256 00b8               
 257 00b8               #***** BEGIN STUDENT CODE BLOCK 1 ********************************
 258 00b8               #
 259 00b8               # Using the circle code below as your guide, write everything
 260 00b8               # necessary to implement the FIGURE child class called BLOCK.
 261 00b8               # This involves defining BLOCK's virtual function table, its
 262 00b8               # creation routine, block_make, and its two virtual (polymorphic)
 263 00b8               # functions, block_area and block_perimeter.
 264 00b8               #
 265 00b8               
 266 00b8               # CODE FOR FIGURE SUBCLASS BLOCK
 267 00b8               
 268 00b8               #***********************************
 269 0539                       .data
 270 0539 000000  	        .align 2
 271 053c               
 272 053c               block_vtbl:
 273 053c 00000000	        .word   block_area
 274 0540 00000000	        .word   block_perimeter
 275 0544               
 276 00b8                       .text
 277 00b8               #************************************
 278 00b8               #
 279 00b8               # Name:     block_make
 280 00b8               #
 281 00b8               # Description:  Initialize the components of the block object
 282 00b8               #       All this subroutine does is set the virtual function
 283 00b8               #       table, then call figure_make.
 284 00b8               #
 285 00b8               # Arguments:    a0 contains the height of the figure's bounding box
 286 00b8               #       a1 contains the width of the figure's bounding box
 287 00b8               #       a2 contains the address of the figure object
 288 00b8               
 289 00b8               block_make:
 290 00b8 23BDFFF8	        addi    $sp, $sp, -FRAMESIZE_8
 291 00bc AFBF0004	        sw      $ra, -4+FRAMESIZE_8($sp)
 292 00c0               
 293 00c0 3C090000	        la      $t1, block_vtbl # get block's vtable pointer
     00c4 35290000
 294 00c8 ACC90000	        sw      $t1, 0($a2)     # put block's vtable pointer into this fig
 295 00cc                                               # object
 296 00cc                       
 297 00cc 0C00002B	        jal     figure_make
 298 00d0                       
 299 00d0 8FBF0004	        lw      $ra, -4+FRAMESIZE_8($sp) # get ra off stack, and restore
 300 00d4 23BD0008	        addi    $sp, $sp, FRAMESIZE_8
 301 00d8 03E00008	        jr      $ra   
 302 00dc               
 303 00dc               #
 304 00dc               # Name:         block_area
 305 00dc               #
 306 00dc               # Descirption:  compute the area of the block figure
 307 00dc               #
 308 00dc               # Arguments:    a0 contains the address of the figure object
 309 00dc               # 
 310 00dc               # Returns:      v0 contains the area
 311 00dc               #
 312 00dc               block_area:
 313 00dc 23BDFFF8	        addi    $sp, $sp, -FRAMESIZE_8
 314 00e0 AFBF0004	        sw      $ra, -4+FRAMESIZE_8($sp)
 315 00e4               
 316 00e4 8C890004	        lw      $t1, 4($a0)     # get block width
 317 00e8 8C8A0008	        lw      $t2, 8($a0)     # get block height 
 318 00ec 012A0018	        mult    $t1, $t2        # multiply width * height
 319 00f0 00001012	        mflo    $v0             
 320 00f4               
 321 00f4 8FBF0004	        lw      $ra, -4+FRAMESIZE_8($sp)        # restore ra from stack
 322 00f8 23BD0008	        addi    $sp, $sp, FRAMESIZE_8
 323 00fc 03E00008	        jr      $ra
 324 0100               
 325 0100               # 
 326 0100               # Name:         block_perimeter
 327 0100               #
 328 0100               # Descirption:  Computer the perimeter of the block figure
 329 0100               #
 330 0100               # Arguments:    a0 contains the address of the figure object
 331 0100               #
 332 0100               # Returns:      v0 contains the perimeter
 333 0100               #
 334 0100               block_perimeter:
 335 0100 23BDFFF8	        addi    $sp, $sp, -FRAMESIZE_8
 336 0104 AFBF0004	        sw      $ra, -4+FRAMESIZE_8($sp)
 337 0108               
 338 0108 8C8A0004	        lw      $t2, 4($a0)     # get block width
 339 010c 8C8B0008	        lw      $t3, 8($a0)     # get block height
 340 0110 20020000	        addi    $v0, $zero, 0
 341 0114 004A1020	        add     $v0, $v0, $t2   # perimeter is h+h+w+w
 342 0118 004A1020	        add     $v0, $v0, $t2
 343 011c 004B1020	        add     $v0, $v0, $t3
 344 0120 004B1020	        add     $v0, $v0, $t3
 345 0124               
 346 0124 8FBF0004	        lw      $ra, -4+FRAMESIZE_8($sp)        # restore ra from stack
 347 0128 23BD0008	        addi    $sp, $sp, FRAMESIZE_8
 348 012c 03E00008	        jr      $ra
 349 0130               
 350 0130               # 
 351 0130               # Name:         block_diameter
 352 0130               #
 353 0130               # Description:  Computer the diameter of the block figure
 354 0130               #
 355 0130               # Arguments:    a0 contains the address if the figure object
 356 0130               #
 357 0130               # Returns:      v0 contains the diameter
 358 0130               #
 359 0130               block_diameter:
 360 0130 8C880004	        lw      $t0, 4($a0)     # get fig's width
 361 0134 8C890008	        lw      $t1, 8($a0)     # get fig's height
 362 0138                       
 363 0138 0109502A	        slt     $t2, $t0, $t1   # see if width < height
 364 013c 11400002	        beq     $t2, $zero, bd_height_bigger
 365 0140                       
 366 0140 01001021	        move    $v0, $t0        # width is smaller
 367 0144 03E00008	        jr      $ra
 368 0148               
 369 0148               bd_height_bigger:
 370 0148 01201021	        move    $v0, $t1        # height is smaller
 371 014c 03E00008	        jr      $ra
 372 0150                   
 373 0150               
 374 0150               #***** END STUDENT CODE BLOCK 1 **********************************
 375 0150               
 376 0150               # CODE FOR FIGURE SUBCLASS CIRCLE
 377 0150               
 378 0150               #************************************
 379 0544               	.data
 380 0544               	.align	2
 381 0544               
 382 0544               circle_vtbl:
 383 0544 00000000		.word	circle_area
 384 0548 00000000		.word	circle_perimeter
 385 054c               
 386 0150               	.text
 387 0150               #************************************
 388 0150               #
 389 0150               # Name:		circle_make
 390 0150               #
 391 0150               # Description:	Initialize the components of the circle object
 392 0150               #		All this subroutine does is set the virtual function
 393 0150               #		table, then call figure_make.
 394 0150               #
 395 0150               # Arguments:	a0 contains the height of the figure's bounding box
 396 0150               #		a1 contains the width of the figure's bounding box
 397 0150               #		a2 contains the address of the figure object
 398 0150               #
 399 0150               
 400 0150               circle_make:
 401 0150 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 402 0154 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 403 0158               
 404 0158 3C090000		la	$t1, circle_vtbl	# get circle's vtable pointer
     015c 35290000
 405 0160 ACC90000		sw	$t1, 0($a2)	# put circle's vtable pointer into this fig
 406 0164               				# object
 407 0164 0C00002B		jal	figure_make
 408 0168               
 409 0168 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)  # get ra off stack, and restore
 410 016c 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 411 0170 03E00008		jr	$ra
 412 0174               
 413 0174               #
 414 0174               # Name:		circle_area
 415 0174               #
 416 0174               # Description:	Compute the area of the circle figure
 417 0174               #
 418 0174               # Arguments:	a0 contains the address of the figure object
 419 0174               #
 420 0174               # Returns:	v0 contains the area
 421 0174               #
 422 0174               circle_area:
 423 0174 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 424 0178 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 425 017c               
 426 017c 34190003		li	$t9, PI		# get our int approx. for PI = 3
 427 0180               
 428 0180 0C000074		jal	circle_diameter	# get my diameter in v0
 429 0184               	
 430 0184 34010002		div	$t0, $v0, 2	# t0 = radius
     0188 0041001A
     018c 00004012
 431 0190 01080018		mul	$t1, $t0, $t0	# t1 = radius squared
     0194 00004812
 432 0198 01390018		mul	$v0, $t1, $t9	# v0 = PI * radius squared
     019c 00001012
 433 01a0               
 434 01a0 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 435 01a4 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 436 01a8 03E00008		jr	$ra
 437 01ac               
 438 01ac               #
 439 01ac               # Name:		circle_perimeter
 440 01ac               #
 441 01ac               # Description:	Compute the perimeter of the circle figure
 442 01ac               #
 443 01ac               # Arguments:	a0 contains the address of the figure object
 444 01ac               #
 445 01ac               # Returns:	v0 contains the perimeter
 446 01ac               #
 447 01ac               circle_perimeter:
 448 01ac 23BDFFF8		addi 	$sp, $sp,-FRAMESIZE_8
 449 01b0 AFBF0004		sw 	$ra, -4+FRAMESIZE_8($sp)
 450 01b4               
 451 01b4 34190003		li	$t9, PI		# get our int approx. for PI = 3
 452 01b8               
 453 01b8 0C000074		jal	circle_diameter	# get my diameter in v0
 454 01bc               	
 455 01bc 00590018		mul	$v0, $v0, $t9	# v0 = PI * diameter
     01c0 00001012
 456 01c4               
 457 01c4 8FBF0004		lw 	$ra, -4+FRAMESIZE_8($sp)	# restore ra from stack
 458 01c8 23BD0008		addi 	$sp, $sp, FRAMESIZE_8
 459 01cc 03E00008		jr	$ra
 460 01d0               
 461 01d0               #
 462 01d0               # Name:		circle_diameter
 463 01d0               #
 464 01d0               # Description:	Compute the diameter of the circle figure
 465 01d0               #
 466 01d0               # Arguments:	a0 contains the address of the figure object
 467 01d0               #
 468 01d0               # Returns:	v0 contains the diameter
 469 01d0               #
 470 01d0               circle_diameter:
 471 01d0 8C880004		lw	$t0, 4($a0)	# get fig's width
 472 01d4 8C890008		lw	$t1, 8($a0)	# get fig's height
 473 01d8               
 474 01d8 0109502A		slt	$t2, $t0, $t1	# see if width < height
 475 01dc 11400002		beq	$t2, $zero, cd_height_bigger
 476 01e0               
 477 01e0 01001021		move	$v0, $t0	# width is smaller
 478 01e4 03E00008		jr	$ra
 479 01e8               
 480 01e8               cd_height_bigger:
 481 01e8 01201021		move	$v0, $t1	# height is smaller
 482 01ec 03E00008		jr	$ra
 483 01f0               
 484 01f0               #
 485 01f0               # Name:		output_figures
 486 01f0               #
 487 01f0               # Description:	Given the paramters for a figure, make one and print out
 488 01f0               #		its attributes.
 489 01f0               #
 490 01f0               # Arguments:	fig_char: Character representing figure type
 491 01f0               #		a0: width
 492 01f0               #		a1: height
 493 01f0               #
 494 01f0               #
 495 01f0               output_figures:
 496 01f0 23BDFFD0		addi	$sp, $sp,-FRAMESIZE_48
 497 01f4 AFBF002C		sw	$ra, -4+FRAMESIZE_48($sp)
 498 01f8 AFB70028		sw	$s7, -8+FRAMESIZE_48($sp)
 499 01fc AFB60024		sw	$s6, -12+FRAMESIZE_48($sp)
 500 0200 AFB50020		sw	$s5, -16+FRAMESIZE_48($sp)
 501 0204 AFB4001C		sw	$s4, -20+FRAMESIZE_48($sp)
 502 0208 AFB30018		sw	$s3, -24+FRAMESIZE_48($sp)
 503 020c AFB20014		sw	$s2, -28+FRAMESIZE_48($sp)
 504 0210 AFB10010		sw	$s1, -32+FRAMESIZE_48($sp)
 505 0214 AFB0000C		sw	$s0, -36+FRAMESIZE_48($sp)
 506 0218               
 507 0218 00809821		move	$s3, $a0	# s3 will be the width
 508 021c 00A0A021		move	$s4, $a1	# s4 will be the height
 509 0220               
 510 0220 0C000017		jal	new_figure	# create a new figure
 511 0224 00408821		move	$s1, $v0	# save the pointer to the fig object
 512 0228               
 513 0228               	#
 514 0228               	# Now, see which one we should make
 515 0228               	#
 516 0228               
 517 0228 3C010000		lbu	$s6, char_c	# get our characters for comparison
     022c 90360000
 518 0230 3C010000		lbu	$s7, char_b
     0234 90370000
 519 0238               
 520 0238 3C010000		lbu	$s5, fig_char	# get the type of fig to create
     023c 90350000
 521 0240               
 522 0240 16B6000B		bne	$s5, $s6, not_circle  # see if creating a circle
 523 0244               	#
 524 0244               	# Set up the arguments to the circle_make call
 525 0244               	# 	a0 contains the height of the figure's bounding box
 526 0244               	# 	a1 contains the width of the figure's bounding box
 527 0244               	#	a2 contains the address of the figure object
 528 0244               	#
 529 0244 02802021		move	$a0, $s4		# s4 was the height
 530 0248 02602821		move	$a1, $s3		# s3 was the width
 531 024c 02203021		move	$a2, $s1		# s1 was the location of new fig object
 532 0250 0C000054		jal	circle_make
 533 0254               
 534 0254               
 535 0254               	#
 536 0254               	# Print "Circle ("
 537 0254               	#
 538 0254               
 539 0254 34020004		li 	$v0, PRINT_STRING	# print a "Circle ("
 540 0258 3C040000		la 	$a0, circle_string
     025c 34840000
 541 0260 0000000C		syscall	
 542 0264               
 543 0264 02202021		move	$a0, $s1		# send the pointer to the fig object
 544 0268               				# as the arg. to print_rest
 545 0268 0C0000B7		jal	print_rest	# print rest of info of the fig
 546 026c 080000AC		j 	done_output
 547 0270               
 548 0270               
 549 0270               not_circle:
 550 0270 16B7000B		bne	$s5, $s7, not_anything  # see if creating a block
 551 0274               	#
 552 0274               	# Set up the arguments to the block_make call
 553 0274               	# 	a0 contains the height of the figure's bounding box
 554 0274               	# 	a1 contains the width of the figure's bounding box
 555 0274               	#	a2 contains the address of the figure object
 556 0274               	#
 557 0274 02802021		move	$a0, $s4		# s4 was the height
 558 0278 02602821		move	$a1, $s3		# s3 was the width
 559 027c 02203021		move	$a2, $s1		# s1 was the location of new fig object
 560 0280 0C00002E		jal	block_make
 561 0284               
 562 0284               
 563 0284               	#
 564 0284               	# Print "Block ("
 565 0284               	#
 566 0284               
 567 0284 34020004		li 	$v0, PRINT_STRING	# print a "Block ("
 568 0288 3C040000		la 	$a0, block_string
     028c 34840000
 569 0290 0000000C		syscall	
 570 0294               
 571 0294 02202021		move	$a0, $s1		# send the pointer to the fig object
 572 0298               				# as the arg. to print_rest
 573 0298 0C0000B7		jal	print_rest	# print rest of info of the fig
 574 029c 080000AC		j 	done_output
 575 02a0               
 576 02a0               not_anything:
 577 02a0               	#
 578 02a0               	# Print error message
 579 02a0               	#
 580 02a0               
 581 02a0 34020004		li 	$v0, PRINT_STRING
 582 02a4 3C040000		la 	$a0, figure_type_error_string
     02a8 34840000
 583 02ac 0000000C		syscall	
 584 02b0               
 585 02b0               	#
 586 02b0               	# exit
 587 02b0               	#
 588 02b0               
 589 02b0               done_output:
 590 02b0 8FBF002C		lw	$ra, -4+FRAMESIZE_48($sp)
 591 02b4 8FB70028		lw	$s7, -8+FRAMESIZE_48($sp)
 592 02b8 8FB60024		lw	$s6, -12+FRAMESIZE_48($sp)
 593 02bc 8FB50020		lw	$s5, -16+FRAMESIZE_48($sp)
 594 02c0 8FB4001C		lw	$s4, -20+FRAMESIZE_48($sp)
 595 02c4 8FB30018		lw	$s3, -24+FRAMESIZE_48($sp)
 596 02c8 8FB20014		lw	$s2, -28+FRAMESIZE_48($sp)
 597 02cc 8FB10010		lw	$s1, -32+FRAMESIZE_48($sp)
 598 02d0 8FB0000C		lw	$s0, -36+FRAMESIZE_48($sp)
 599 02d4 23BD0030		addi	$sp, $sp, FRAMESIZE_48
 600 02d8               
 601 02d8 03E00008		jr	$ra
 602 02dc               
 603 02dc               #
 604 02dc               # Name:		print_rest
 605 02dc               #
 606 02dc               # Description:	prints out the information about a figure
 607 02dc               #
 608 02dc               # Arguments:	a0: contains the address of the figure object
 609 02dc               #
 610 02dc               
 611 02dc               print_rest:
 612 02dc               	#
 613 02dc               	# Save all the S registers & ra
 614 02dc               	#
 615 02dc 23BDFFD8		addi	$sp, $sp,-FRAMESIZE_40
 616 02e0 AFBF0024		sw	$ra, -4+FRAMESIZE_40($sp)
 617 02e4 AFB70020		sw	$s7, -8+FRAMESIZE_40($sp)
 618 02e8 AFB6001C		sw	$s6, -12+FRAMESIZE_40($sp)
 619 02ec AFB50018		sw	$s5, -16+FRAMESIZE_40($sp)
 620 02f0 AFB40014		sw	$s4, -20+FRAMESIZE_40($sp)
 621 02f4 AFB30010		sw	$s3, -24+FRAMESIZE_40($sp)
 622 02f8 AFB2000C		sw	$s2, -28+FRAMESIZE_40($sp)
 623 02fc AFB10008		sw	$s1, -32+FRAMESIZE_40($sp)
 624 0300 AFB00004		sw	$s0, -36+FRAMESIZE_40($sp)
 625 0304               
 626 0304 00808021		move	$s0, $a0	# s0 will be your pointer to figure
 627 0308               				# since a0 is needed by the syscalls
 628 0308               
 629 0308               #***** BEGIN STUDENT CODE BLOCK 2 ********************************
 630 0308               #
 631 0308               # Print the figure's width using PRINT_INT. At this point, s0 contains
 632 0308               # the address of the figure object, and shouldn't be changed.
 633 0308               #
 634 0308               # Note that this does not involve any polymorphic functions.
 635 0308               #
 636 0308               
 637 0308 34020001	        li      $v0, 1          # load indicator for PRINT_INT syscall
 638 030c 8E040004	        lw      $a0, 4($s0)     # load width for PRINT_INT syscall
 639 0310 0000000C	        syscall
 640 0314               
 641 0314               #***** END STUDENT CODE BLOCK 2 **********************************
 642 0314               
 643 0314 34020004		li 	$v0, PRINT_STRING	# print ','
 644 0318 3C040000		la 	$a0, comma_string
     031c 34840000
 645 0320 0000000C		syscall
 646 0324               
 647 0324               #***** BEGIN STUDENT CODE BLOCK 3 ********************************
 648 0324               #
 649 0324               # Print the figure's height using PRINT_INT. At this point, s0 contains
 650 0324               # the address of the figure object, and shouldn't be changed.
 651 0324               #
 652 0324               # Note that this does not involve any polymorphic functions.
 653 0324               #
 654 0324               
 655 0324 34020001	        li      $v0, 1          # load indicator for PRINT_INT syscall
 656 0328 8E040008	        lw      $a0, 8($s0)     # load height for PRINT_INT syscall
 657 032c 0000000C	        syscall
 658 0330               
 659 0330               #***** END STUDENT CODE BLOCK 3 **********************************
 660 0330               	
 661 0330 34020004		li 	$v0, PRINT_STRING 	# print ') - area = '
 662 0334 3C040000		la 	$a0, area_string
     0338 34840000
 663 033c 0000000C		syscall
 664 0340               
 665 0340               #***** BEGIN STUDENT CODE BLOCK 4 ********************************
 666 0340               #
 667 0340               # Print the figure's area using PRINT_INT. At this point, s0 contains
 668 0340               # the address of the figure object, and shouldn't be changed.
 669 0340               #
 670 0340               
 671 0340 8E110000	        lw      $s1, 0($s0)     # get address of virtual function table  
 672 0344 8E310000	        lw      $s1, 0($s1)     # get address of proper area function
 673 0348 02002021	        move    $a0, $s0        # set the argument for the area function
 674 034c 0220F809	        jalr    $s1             # run polymorphic area function
 675 0350 00402021	        move    $a0, $v0        # load area for PRINT_INT syscall
 676 0354 34020001	        li      $v0, 1          # load indicator for PRINT_INT
 677 0358 0000000C	        syscall
 678 035c               
 679 035c               #***** END STUDENT CODE BLOCK 4 **********************************
 680 035c               	
 681 035c 34020004		li 	$v0, PRINT_STRING	# print '; perimeter = '
 682 0360 3C040000		la 	$a0, perimeter_string
     0364 34840000
 683 0368 0000000C		syscall
 684 036c               
 685 036c               #***** BEGIN STUDENT CODE BLOCK 5 ********************************
 686 036c               #
 687 036c               # Print the figure's perimeter using PRINT_INT. At this point, s0
 688 036c               # contains the address of the figure object, and shouldn't be changed.
 689 036c               #
 690 036c               
 691 036c 8E110000	        lw      $s1, 0($s0)     # get address of virtual function table
 692 0370 8E310004	        lw      $s1, 4($s1)     # get address of proper perimeter function
 693 0374 02002021	        move    $a0, $s0        # set the argument for the area function
 694 0378 0220F809	        jalr    $s1             # run polymorphic perimeter function
 695 037c 00402021	        move    $a0, $v0        # load perimeter for PRINT_INT syscall
 696 0380 34020001	        li      $v0, 1          # load indicator for PRINT_INT
 697 0384 0000000C	        syscall
 698 0388               
 699 0388               #***** END STUDENT CODE BLOCK 5 **********************************
 700 0388               
 701 0388               	
 702 0388 34020004		li 	$v0, PRINT_STRING	# print newline
 703 038c 3C040000		la 	$a0, new_line
     0390 34840000
 704 0394 0000000C		syscall
 705 0398               
 706 0398               	#
 707 0398               	# Restore all the S registers
 708 0398               	#
 709 0398 8FBF0024		lw	$ra, -4+FRAMESIZE_40($sp)
 710 039c 8FB70020		lw	$s7, -8+FRAMESIZE_40($sp)
 711 03a0 8FB6001C		lw	$s6, -12+FRAMESIZE_40($sp)
 712 03a4 8FB50018		lw	$s5, -16+FRAMESIZE_40($sp)
 713 03a8 8FB40014		lw	$s4, -20+FRAMESIZE_40($sp)
 714 03ac 8FB30010		lw	$s3, -24+FRAMESIZE_40($sp)
 715 03b0 8FB2000C		lw	$s2, -28+FRAMESIZE_40($sp)
 716 03b4 8FB10008		lw	$s1, -32+FRAMESIZE_40($sp)
 717 03b8 8FB00004		lw	$s0, -36+FRAMESIZE_40($sp)
 718 03bc 23BD0028		addi	$sp, $sp, FRAMESIZE_40
 719 03c0               
 720 03c0 03E00008		jr	$ra


FRAMESIZE_24              = 00000018   
FRAMESIZE_40              = 00000028   
FRAMESIZE_48              = 00000030   
FRAMESIZE_8               = 00000008   
PI                        = 00000003   
PRINT_INT                 = 00000001   
PRINT_STRING              = 00000004   
READ_INT                  = 00000005   
READ_STRING               = 00000008   
area_string                 0000051C R  data 
bd_height_bigger            00000148 R  text 
block_area                  000000DC R  text 
block_diameter              00000130 R  text 
block_make                  000000B8 R  text 
block_perimeter             00000100 R  text 
block_string                00000512 R  data 
block_vtbl                  0000053C R  data 
cd_height_bigger            000001E8 R  text 
char_b                      000004CC R  data 
char_c                      000004CB R  data 
circle_area                 00000174 R  text 
circle_diameter             000001D0 R  text 
circle_make                 00000150 R  text 
circle_perimeter            000001AC R  text 
circle_string               00000509 R  data 
circle_vtbl                 00000544 R  data 
comma_string                0000051A R  data 
done_output                 000002B0 R  text 
fig_char                    000004C0 R  data 
fig_height                  000004BC R  data 
fig_width                   000004B8 R  data 
figure_make                 000000AC R  text 
figure_type_error_string    000004F4 R  data 
main                        00000000 RG text 
new_error                   000004CD R  data 
new_figure                  0000005C R  text 
new_figure_ok               0000008C R  text 
new_line                    00000537 R  data 
next                        00000000 R  data 
not_anything                000002A0 R  text 
not_circle                  00000270 R  text 
output_figures              000001F0 R  text 
perimeter_string            00000528 R  data 
pool                        00000004 R  data 
pool_end                    000004B4 R  data 
print_rest                  000002DC R  text 
